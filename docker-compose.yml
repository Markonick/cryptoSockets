version: '3.7'
services:
  ticker_producer:
    build:
      context: ./backend/producers/binance_ticker_producer
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
        - ./backend/producers/binance_ticker_producer:/usr/src/app
    ports:
        - 8002:8000
    depends_on:
    #   - cryptodb
      - kafka
      - zookeeper
    environment:
      PYTHONUNBUFFERED: 1
      POSTGRES_USER: devUser
      POSTGRES_PASSWORD: devUser1
      POSTGRES_DB: cryptos 
      SCHEMA: ${SCHEMA}
      KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_ADVERTISED_HOST_NAME}
      KAFKA_CREATE_TOPICS: ${KAFKA_CREATE_TOPICS}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
    networks:
      - proxynet
  # kline_producer:
  #   build:
  #     context: ./backend/producers/binance_kline_producer
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   volumes:
  #       - ./backend/producers/binance_kline_producer:/usr/src/app
  #   ports:
  #       - 8004:8000
  #   depends_on:
  #     - cryptodb
  #     - kafka
  #     - zookeeper
  #   environment:
  #     PYTHONUNBUFFERED: 1
  #     POSTGRES_USER: devUser
  #     POSTGRES_PASSWORD: devUser1
  #     POSTGRES_DB: cryptos 
  #     SCHEMA: ${SCHEMA}
  #     KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_ADVERTISED_HOST_NAME}
  #     KAFKA_CREATE_TOPICS: ${KAFKA_CREATE_TOPICS}
  #     KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
  #   networks:
  #     - proxynet
  # write_real_time_data_to_db:
  #   build:
  #     context: ./backend/consumers/write_real_time_data_to_db
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   volumes:
  #       - ./backend/consumers/write_real_time_data_to_db/:/usr/src/app
  #   ports:
  #       - 8003:8000
  #   depends_on:
  #     - cryptodb
  #     - kafka
  #     - zookeeper
  #   environment:
  #     PYTHONUNBUFFERED: 1
  #     POSTGRES_USER: devUser
  #     POSTGRES_PASSWORD: devUser1
  #     POSTGRES_DB: cryptos 
  #     SCHEMA: ${SCHEMA}
  #     KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_ADVERTISED_HOST_NAME}
  #     KAFKA_CREATE_TOPICS: ${KAFKA_CREATE_TOPICS}
  #     KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
  #   networks:
  #     - proxynet
  # ui_binance_websockets_api:
  #   build:
  #     context: ./backend/consumers/ui_binance_websockets_api
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   volumes:
  #       - ./backend/consumers/ui_binance_websockets_api/:/usr/src/app
  #   ports:
  #       - 8000:8000
  #   depends_on:
  #     - kafka
  #     - zookeeper
  #   environment:
  #     PYTHONUNBUFFERED: 1
  #     KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_ADVERTISED_HOST_NAME}
  #     KAFKA_CREATE_TOPICS: ${KAFKA_CREATE_TOPICS}
  #     KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
  #   networks:
  #     - proxynet
  # cryptodb:
  #   image: postgres:13
  #   ports:
  #     - "5432:5432"
  #   environment: 
  #       POSTGRES_USER: devUser
  #       POSTGRES_PASSWORD: devUser1
  #       POSTGRES_DB: cryptos 
  #   volumes:
  #     - ./backend/db:/docker-entrypoint-initdb.d/
  #   networks:
  #     - proxynet  
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    networks:
      - proxynet  
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_ADVERTISED_HOST_NAME}
      KAFKA_CREATE_TOPICS: ${KAFKA_CREATE_TOPICS}
      KAFKA_ZOOKEEPER_CONNECT: ${KAFKA_ZOOKEEPER_CONNECT}
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      KAFKA_TOOLS_LOG4J_LOGLEVEL: WARN
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - "zookeeper"
    networks:
      - proxynet  
  kafdrop:
    image: obsidiandynamics/kafdrop:3.23.0
    ports:
      - 9100:9000
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
      - JVM_OPTS=-Xms32M -Xmx64M
    depends_on:
      - kafka
    networks:
      - proxynet
  # frontend:
  #   container_name: frontend
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   ports:
  #     - 3001:3000
  #   environment:
  #     CHOKIDAR_USEPOLLING: "true"
  #     PORT: ${PORT}
  #     NODE_ENV: ${NODE_ENV}
  #     REACT_APP_BASE_URL: "https://api.binance.com/api/v3"
  #     CMC_PRO_API_KEY: ${CMC_PRO_API_KEY}
  #   volumes:
  #     - ./frontend:/app
  #   networks:
  #     - proxynet
networks:
  proxynet:
    name: custom_network